<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://patrickcap.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://patrickcap.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-04-23T20:51:46+00:00</updated><id>https://patrickcap.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Exploronomics</title><link href="https://patrickcap.github.io/blog/2024/exploronomics/" rel="alternate" type="text/html" title="Exploronomics"/><published>2024-12-03T00:00:00+00:00</published><updated>2024-12-03T00:00:00+00:00</updated><id>https://patrickcap.github.io/blog/2024/exploronomics</id><content type="html" xml:base="https://patrickcap.github.io/blog/2024/exploronomics/"><![CDATA[<div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/projects/exploronomics/exploronomics_globe-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/projects/exploronomics/exploronomics_globe-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/projects/exploronomics/exploronomics_globe-1400.webp"/> <img src="/assets/img/projects/exploronomics/exploronomics_globe.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Exploronomics globe. </div> <p>I’m making a tool, just for fun, to help get a feel of the economics of the countries of the world.</p> <p>Check it out <a href="https://patrickcap.github.io/exploronomics/" target="_blank">here!</a></p> <h2 id="globe-model">Globe Model</h2> <p>I did initially try to create my own 3D model of the Earth using primitive shapes linking this to a downloadable JSON file of the all the borders of every country in the world like <a href="https://geojson-maps.kyd.au/">this</a>.</p> <p>However, this proved to be quite difficult and buggy and was probably going to take a very long time to get working at a minimum, let alone optimising for performance on client-side. Note that this page contains only a frontend as GitHub Pages can only serve static content, meaning no backend server can run alongside the frontend. So all the computation must be done on client-side.</p> <p>I stumbled across <a href="https://observablehq.com/@michael-keith/draggable-globe-in-d3">this</a> draggable globe in D3.js by Michael Keith which was exactly what I was looking for and so I simply linked to this in my code.</p>]]></content><author><name>Patrick Capaldo</name></author><category term="tutorials"/><category term="economics"/><summary type="html"><![CDATA[Exploring Global Economics.]]></summary></entry><entry><title type="html">PyPuzzle 004 Method Resolution Order</title><link href="https://patrickcap.github.io/blog/2024/pypuzzle-004/" rel="alternate" type="text/html" title="PyPuzzle 004 Method Resolution Order"/><published>2024-05-13T00:00:00+00:00</published><updated>2024-05-13T00:00:00+00:00</updated><id>https://patrickcap.github.io/blog/2024/pypuzzle-004</id><content type="html" xml:base="https://patrickcap.github.io/blog/2024/pypuzzle-004/"><![CDATA[<p>This weeks PyPuzzle will test your knowledge of the Method Resolution Order (MRO) and the C3 linearisation algorithm that determines the order in which classes are inherited and methods are resolved.</p> <ul> <li>Inheritance and method resolution</li> <li>Method Resolution Order (MRO)</li> <li>The <code class="language-plaintext highlighter-rouge">super()</code> function</li> </ul> <p>Feel free to use an online Python compiler and interpreter like [this] (https://www.online-python.com/) to try running the code yourself. The answer is supplied below the code.</p> <h2 id="question">Question</h2> <p>What is the expected output of the following code?</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">A</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">B</span><span class="p">(</span><span class="n">A</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">show</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">C</span><span class="p">(</span><span class="n">A</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">show</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">D</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">D</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">show</span><span class="p">()</span>

<span class="n">d</span> <span class="o">=</span> <span class="nc">D</span><span class="p">()</span>
<span class="n">d</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>

</code></pre></div></div> <h2 id="hints">Hints</h2> <ol> <li>Python uses the C3 linearization algorithm to determine the MRO of a class. What does the MRO look like for <code class="language-plaintext highlighter-rouge">D</code>?</li> <li>The <code class="language-plaintext highlighter-rouge">super()</code> function doesn’t always refer to the immediate parent class. Instead, it follows the MRO.</li> <li>How do multiple inheritance and <code class="language-plaintext highlighter-rouge">super()</code> calls interact?</li> </ol> <h2 id="answer">Answer</h2> <p>The output is:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>D
B
C
A

</code></pre></div></div> <ul> <li>MRO (Method Resolution Order): The MRO for class <code class="language-plaintext highlighter-rouge">D</code> is determined using the C3 linearization algorithm. The MRO for <code class="language-plaintext highlighter-rouge">D</code> is: <code class="language-plaintext highlighter-rouge">[D, B, C, A]</code>.</li> <li>When <code class="language-plaintext highlighter-rouge">d.show()</code> is called: <ul> <li><code class="language-plaintext highlighter-rouge">D.show()</code> is executed first and prints <code class="language-plaintext highlighter-rouge">D</code>. It then calls <code class="language-plaintext highlighter-rouge">super().show()</code>, which refers to the next class in the MRO, <code class="language-plaintext highlighter-rouge">B</code>.</li> <li><code class="language-plaintext highlighter-rouge">B.show()</code> is called and prints <code class="language-plaintext highlighter-rouge">B</code>. It also calls <code class="language-plaintext highlighter-rouge">super().show()</code>, which refers to <code class="language-plaintext highlighter-rouge">C</code>, the next in the MRO.</li> <li><code class="language-plaintext highlighter-rouge">C.show()</code> is executed and prints <code class="language-plaintext highlighter-rouge">C</code>. It calls <code class="language-plaintext highlighter-rouge">super().show()</code>, which moves to <code class="language-plaintext highlighter-rouge">A</code>.</li> <li><code class="language-plaintext highlighter-rouge">A.show()</code> is executed and prints <code class="language-plaintext highlighter-rouge">A</code>. Since <code class="language-plaintext highlighter-rouge">A</code> doesn’t have a <code class="language-plaintext highlighter-rouge">super().show()</code> call, the chain ends there.</li> </ul> </li> </ul> <h2 id="learnings">Learnings</h2> <ol> <li>Method Resolution Order (MRO): The MRO determines the order in which classes are checked when a method is called. It is calculated using the C3 linearization algorithm, which ensures that the inheritance hierarchy is respected without ambiguity. Note that the MRO is unique for each class yet the MRO of a subclass is still consistent with the MRO of its parent class.</li> </ol> <p>The MRO of a class can be checked with the <code class="language-plaintext highlighter-rouge">__mro__</code> attribute or the <code class="language-plaintext highlighter-rouge">mro()</code> method.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">A</span><span class="p">:</span>
    <span class="k">pass</span>

<span class="k">class</span> <span class="nc">B</span><span class="p">(</span><span class="n">A</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">class</span> <span class="nc">C</span><span class="p">(</span><span class="n">A</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">class</span> <span class="nc">D</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="nf">print</span><span class="p">(</span><span class="n">D</span><span class="p">.</span><span class="n">__mro__</span><span class="p">)</span>
<span class="c1"># Output: (&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class 'object'&gt;)
</span>
</code></pre></div></div> <ol> <li>C3 Linearisation Algorithm: This algorithm determines the MRO for each class. It works by merging the MROs of the direct parent classes and the list of parent classes themselves. The C3 linearisation algorithm follows the following principles: <ul> <li>Preserve the local precedence order: If a class <code class="language-plaintext highlighter-rouge">B</code> inherits from a class <code class="language-plaintext highlighter-rouge">A</code>, <code class="language-plaintext highlighter-rouge">B</code> should appear before <code class="language-plaintext highlighter-rouge">A</code> in the MRO for class <code class="language-plaintext highlighter-rouge">B</code> (and any other classes that inherit from class <code class="language-plaintext highlighter-rouge">B</code>).</li> <li>Consistent across all subclasses: The algorithm should work uniformly when building MROs of classes that have common ancestors.</li> <li>Avoid duplicate entries: Each class should appear only once in the MRO.</li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">super()</code>: The <code class="language-plaintext highlighter-rouge">super()</code> function doesn’t necessarily refer to the immediate parent class but instead follows the MRO. This is crucial in cases of multiple inheritance.</li> <li>Class Hierarchies: Understanding how Python resolves method calls in complex hierarchies can prevent unexpected behavior and bugs in class designs involving multiple inheritance.</li> </ol>]]></content><author><name>Patrick Capaldo</name></author><category term="puzzles"/><category term="python"/><summary type="html"><![CDATA[The order in which classes are inherited and methods are resolved.]]></summary></entry><entry><title type="html">PyPuzzle 003 Yield</title><link href="https://patrickcap.github.io/blog/2024/pypuzzle-003/" rel="alternate" type="text/html" title="PyPuzzle 003 Yield"/><published>2024-05-06T00:00:00+00:00</published><updated>2024-05-06T00:00:00+00:00</updated><id>https://patrickcap.github.io/blog/2024/pypuzzle-003</id><content type="html" xml:base="https://patrickcap.github.io/blog/2024/pypuzzle-003/"><![CDATA[<p>This weeks PyPuzzle will test your knowledge of order of generator functions and the yield keyword.</p> <ul> <li>Generator functions</li> <li><code class="language-plaintext highlighter-rouge">yield</code> keyword</li> <li>Iterators and lazy evaluation</li> </ul> <p>Feel free to use an online Python compiler and interpreter like [this] (https://www.online-python.com/) to try running the code yourself. The answer is supplied below the code.</p> <h2 id="question">Question</h2> <p>What is the expected output of the following code? How does the <code class="language-plaintext highlighter-rouge">yield</code> keyword affect the function’s behaviour and why doesn’t it behave like a typical <code class="language-plaintext highlighter-rouge">return</code>?</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">my_generator</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Generator started</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="k">yield</span> <span class="n">i</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Yielded </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">, pausing generator</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Initialize the generator function
</span><span class="n">gen</span> <span class="o">=</span> <span class="nf">my_generator</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>

<span class="c1"># Step through the generator
</span><span class="nf">print</span><span class="p">(</span><span class="nf">next</span><span class="p">(</span><span class="n">gen</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">next</span><span class="p">(</span><span class="n">gen</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">next</span><span class="p">(</span><span class="n">gen</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">next</span><span class="p">(</span><span class="n">gen</span><span class="p">))</span>  <span class="c1"># What happens here?
</span>
</code></pre></div></div> <h2 id="hints">Hints</h2> <ol> <li>What is the difference between <code class="language-plaintext highlighter-rouge">yield</code> and <code class="language-plaintext highlighter-rouge">return</code>? Consider how many times <code class="language-plaintext highlighter-rouge">yield</code> allows the function to pause and resume.</li> <li>Try to visualize what the function does with each call to <code class="language-plaintext highlighter-rouge">next(gen)</code>. How does <code class="language-plaintext highlighter-rouge">my_generator()</code> know where to pick up after yielding a value?</li> <li>What might happen when <code class="language-plaintext highlighter-rouge">next(gen)</code> is called, but there are no more items to yield?</li> </ol> <h2 id="answer">Answer</h2> <ul> <li>The first call to <code class="language-plaintext highlighter-rouge">next(gen)</code> starts the generator, which prints “<code class="language-plaintext highlighter-rouge">Generator started"</code>, yields <code class="language-plaintext highlighter-rouge">0</code>, and then pauses.</li> <li>Each subsequent <code class="language-plaintext highlighter-rouge">next(gen)</code> call resumes from where it left off, yielding the next value in the sequence (<code class="language-plaintext highlighter-rouge">1</code>, then <code class="language-plaintext highlighter-rouge">2</code>), and printing a message after each yield.</li> <li>When <code class="language-plaintext highlighter-rouge">next(gen)</code> is called a fourth time, there are no more values to yield, so Python raises a <code class="language-plaintext highlighter-rouge">StopIteration</code> exception, indicating that the generator has been exhausted.</li> </ul> <p>Expected output:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Generator started
0
Yielded 0, pausing generator
1
Yielded 1, pausing generator
2
Yielded 2, pausing generator
</code></pre></div></div> <h2 id="learnings">Learnings</h2> <ul> <li>Generator Functions and <code class="language-plaintext highlighter-rouge">yield</code>: Using <code class="language-plaintext highlighter-rouge">yield</code> in a function turns it into a generator function. Instead of returning a single result and terminating, it yields multiple values, pausing between each, and can resume execution each time it’s called.</li> <li>Lazy Evaluation: Generators allow Python to produce values on the fly, making them memory-efficient for large data sequences, as values are generated only when needed. This is also beneficial for asynchronous tasks that are input/output (I/O)-bound as you can yield control back to an event loop once the required resources are ready.</li> <li><code class="language-plaintext highlighter-rouge">StopIteration</code> Exception: When a generator has no more values to yield, calling <code class="language-plaintext highlighter-rouge">next()</code> raises a <code class="language-plaintext highlighter-rouge">StopIteration</code> exception, signaling that iteration has completed. This is handled automatically when used in a loop, like a for loop.</li> <li>Generator functions also make it possible to produce infinite sequences (like Fibonacci and prime numbers) without risking memory overload. You can produce as much as you like from an infinite sequence without actually storing the entire sequence.</li> <li>An analogy is like streaming a TV show. You don’t have to load all the episodes from every season of the TV show when you start. You simply load the first episode and start watching that. If you need to pause it and leave for a while, that is fine, if you keep watching and want to watch the second episode, then simply load it once the first one finishes.</li> </ul>]]></content><author><name>Patrick Capaldo</name></author><category term="puzzles"/><category term="python"/><summary type="html"><![CDATA[Generator functions and the yield keyword.]]></summary></entry><entry><title type="html">PyPuzzle 002 GIL</title><link href="https://patrickcap.github.io/blog/2024/pypuzzle-002/" rel="alternate" type="text/html" title="PyPuzzle 002 GIL"/><published>2024-04-29T00:00:00+00:00</published><updated>2024-04-29T00:00:00+00:00</updated><id>https://patrickcap.github.io/blog/2024/pypuzzle-002</id><content type="html" xml:base="https://patrickcap.github.io/blog/2024/pypuzzle-002/"><![CDATA[<p>This weeks PyPuzzle will help you understand the Global Interpreter Lock (GIL) in Python and how it affects multithreading, especially with CPU-bound tasks.</p> <h2 id="topics-covered">Topics Covered</h2> <ul> <li>Global Interpreter Lock (GIL)</li> <li>Threading and CPU-bound tasks</li> <li>Race conditions</li> </ul> <p>Feel free to use an online Python compiler and interpreter like [this] (https://www.online-python.com/) to try running the code yourself. The answer is supplied below the code.</p> <h2 id="question">Question</h2> <p>Given the following code, what do you expect the final value of <code class="language-plaintext highlighter-rouge">counter</code> to be after both threads finish? Run the code multiple times to observe any variations. What does this tell you about the GIL’s impact on multithreading in Python?</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">threading</span>
<span class="kn">import</span> <span class="n">time</span>

<span class="c1"># Global counter
</span><span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">def</span> <span class="nf">increment</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">counter</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1000000</span><span class="p">):</span>
        <span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">def</span> <span class="nf">run_threads</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">counter</span>
    <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># reset the counter before each run
</span>
    <span class="c1"># Create two threads that both increment the counter
</span>    <span class="n">thread1</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">increment</span><span class="p">)</span>
    <span class="n">thread2</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">increment</span><span class="p">)</span>

    <span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>

    <span class="c1"># Start both threads
</span>    <span class="n">thread1</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
    <span class="n">thread2</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>

    <span class="c1"># Wait for both threads to complete
</span>    <span class="n">thread1</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
    <span class="n">thread2</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Final counter:</span><span class="sh">"</span><span class="p">,</span> <span class="n">counter</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Time taken:</span><span class="sh">"</span><span class="p">,</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_time</span><span class="p">)</span>

<span class="c1"># Run the threads
</span><span class="nf">run_threads</span><span class="p">()</span>

</code></pre></div></div> <h2 id="hints">Hints</h2> <ol> <li>Think about the Global Interpreter Lock (GIL): Can both threads execute Python code at exactly the same time?</li> <li>Why might counter not equal 2,000,000, even though each thread attempts to increment it by 1 million?</li> <li>Try running the code multiple times. Does the output stay consistent?</li> <li>Quickly research what a CPU-bound task is. How does it differ from an I/O-bound task?</li> </ol> <h2 id="answer">Answer</h2> <p>Due to the GIL and lack of thread-safety, the expected output (2,000,000) is often not achieved. Instead, you’ll typically see a value lower than 2,000,000 due to race conditions. The threads compete to update <code class="language-plaintext highlighter-rouge">counter</code>, but because of the GIL, only one thread can execute at a time. As they interleave, they may overwrite each other’s updates, resulting in a lower <code class="language-plaintext highlighter-rouge">counter</code> value.</p> <p>Expected output (specific numbers subject to change):</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Final counter: 1323157
Time taken: 0.6897156238555908
</code></pre></div></div> <h2 id="learnings">Learnings</h2> <ol> <li>Global Interpreter Lock (GIL): The GIL prevents true parallelism in Python for CPU-bound tasks because only one thread can execute Python bytecode at a time.</li> <li>CPU-bound Tasks: For tasks that require heavy CPU processing, the GIL limits the benefit of adding more threads. For such tasks, consider using multiprocessing to achieve true parallelism across multiple CPU cores.</li> <li>Race Conditions: Multithreading with shared resources like counter can lead to race conditions, where threads interfere with each other’s updates, producing inconsistent results.</li> <li>Performance and Consistency: The GIL introduces trade-offs between safety and performance in multithreading, especially for CPU-bound tasks, underscoring why threading in Python is more effective for I/O-bound rather than CPU-bound workloads.</li> </ol> <h2 id="further-reading">Further Reading</h2> <ul> <li> <p>CPU-bound tasks are those that spend most of their time waiting for the CPU to finish processing instructions (and thus most of their time hogging the GIL). This is compared to Input/Output (I/O)-bound tasks which spend most of their time waiting for an external event (e.g., network response, reading from a file, database access) to continue the task (and thus can free-up the GIL for a different task).</p> </li> <li> <p>The Global Interpreter Lock (GIL) is a safety mechanism in Python that prevents having multiple threads running at the same time (even if you have multiple CPU cores available where each can hold a single thread at a time).</p> </li> <li> <p>Interestingly, the GIL is mainly a feature of CPython (the default implementation of Python that is written using the C programming language). There are other implementations of Python like PyPy, Jython, and IronPython that are written in other programming languages like Python itself, Java, and C#, respectively. For multithreading, C is not an inherently safe programming language as C allows direct memory access. This means that if two threads were running simultaneously on the same memory, they could access a common memory address that is shared between them. And since processes don’t always take the exact same amount of time to run, this can lead to race conditions and combined with shared memory this would lead to unexpected behaviour, memory leaks, or even crashes. Additionally, since the main implementation of Python, CPython, is based on C, this means that the main implementation of Python is also not inherently safe for multithreading. Thus, the GIL was implemented to ensure only one thread executes at any given time to prevent simultaneous modifications of shared memory.</p> </li> <li> <p>Python could be made safe for multithreading by modifying the underlying CPython code but this would add a significant computational overhead to all Python programs, even the ones that don’t use multithreading (which turns out to be the majority). Being a reliable and thread safe language out-of-the-box is also appealing to extension developers like <code class="language-plaintext highlighter-rouge">NumPy</code> and <code class="language-plaintext highlighter-rouge">Pandas</code> as it means they don’t need to worry about thread safety themselves.</p> </li> </ul>]]></content><author><name>Patrick Capaldo</name></author><category term="puzzles"/><category term="python"/><summary type="html"><![CDATA[How the Global Interpreter Lock (GIL) handles threads.]]></summary></entry><entry><title type="html">PyPuzzle 001 Scope</title><link href="https://patrickcap.github.io/blog/2024/pypuzzle-001/" rel="alternate" type="text/html" title="PyPuzzle 001 Scope"/><published>2024-04-22T00:00:00+00:00</published><updated>2024-04-22T00:00:00+00:00</updated><id>https://patrickcap.github.io/blog/2024/pypuzzle-001</id><content type="html" xml:base="https://patrickcap.github.io/blog/2024/pypuzzle-001/"><![CDATA[<p>This weeks PyPuzzle will test your knowledge of order of execution, operator precedence, and scope.</p> <ul> <li>Execution Order: Tracking the order of statements and the effect of function calls.</li> <li>Operator Precedence: Understanding how <code class="language-plaintext highlighter-rouge">x = x + y</code> works when <code class="language-plaintext highlighter-rouge">x</code> is global.</li> <li>Variable Scope: Understanding <code class="language-plaintext highlighter-rouge">global</code>, <code class="language-plaintext highlighter-rouge">nonlocal</code>, and local scopes.</li> </ul> <p>Feel free to use an online Python compiler and interpreter like [this] (https://www.online-python.com/) to try running the code yourself. The answer is supplied below the code.</p> <h2 id="question">Question</h2> <p>What is the expected output of the following code?</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="mi">5</span>

<span class="k">def</span> <span class="nf">puzzle</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">x</span>
    <span class="n">y</span> <span class="o">=</span> <span class="mi">10</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>

    <span class="k">def</span> <span class="nf">inner</span><span class="p">():</span>
        <span class="k">nonlocal</span> <span class="n">y</span>
        <span class="n">y</span> <span class="o">=</span> <span class="mi">20</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Inside inner:</span><span class="sh">"</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

    <span class="nf">inner</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Inside puzzle:</span><span class="sh">"</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

<span class="nf">puzzle</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Outside puzzle:</span><span class="sh">"</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>

</code></pre></div></div> <h2 id="answer">Answer</h2> <p>After <code class="language-plaintext highlighter-rouge">puzzle()</code> runs:</p> <ol> <li><code class="language-plaintext highlighter-rouge">x</code> in the global scope is updated to <code class="language-plaintext highlighter-rouge">15</code> (from <code class="language-plaintext highlighter-rouge">x + y = 5 + 10</code>).</li> <li><code class="language-plaintext highlighter-rouge">inner()</code> modifies <code class="language-plaintext highlighter-rouge">y</code> in <code class="language-plaintext highlighter-rouge">puzzle()</code> to <code class="language-plaintext highlighter-rouge">20</code>.</li> <li>The <code class="language-plaintext highlighter-rouge">print()</code> inside <code class="language-plaintext highlighter-rouge">inner()</code> outputs <code class="language-plaintext highlighter-rouge">Inside inner: 15 20</code>.</li> <li>The <code class="language-plaintext highlighter-rouge">print()</code> inside <code class="language-plaintext highlighter-rouge">puzzle()</code> outputs <code class="language-plaintext highlighter-rouge">Inside puzzle: 15 20</code>.</li> <li>Finally, <code class="language-plaintext highlighter-rouge">print("Outside puzzle:", x)</code> outputs <code class="language-plaintext highlighter-rouge">Outside puzzle: 15</code>.</li> </ol> <p>Expected output:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Inside inner: 15 20
Inside puzzle: 15 20
Outside puzzle: 15
</code></pre></div></div> <h2 id="learnings">Learnings</h2> <ul> <li>That different parts (functions) of Python code have different world views (scopes).</li> <li>These scopes are defined by the level of the function (indicated by indentation) and the level of the variable (indicated by keywords like <code class="language-plaintext highlighter-rouge">global</code> and <code class="language-plaintext highlighter-rouge">nonlocal</code>).</li> </ul>]]></content><author><name>Patrick Capaldo</name></author><category term="puzzles"/><category term="python"/><summary type="html"><![CDATA[Execution order, operator precedence, and scope.]]></summary></entry><entry><title type="html">Humans and Our Tools</title><link href="https://patrickcap.github.io/blog/2024/humans-and-our-tools/" rel="alternate" type="text/html" title="Humans and Our Tools"/><published>2024-04-22T00:00:00+00:00</published><updated>2024-04-22T00:00:00+00:00</updated><id>https://patrickcap.github.io/blog/2024/humans-and-our-tools</id><content type="html" xml:base="https://patrickcap.github.io/blog/2024/humans-and-our-tools/"><![CDATA[<p>What happens to the purpose of a human once they have made a tool that helps them with a particular task?</p>]]></content><author><name>Patrick Capaldo</name></author><category term="blogs"/><category term="artificial-intelligence"/><summary type="html"><![CDATA[What is our purpose with the tools we create?]]></summary></entry><entry><title type="html">Rockets vs Lightning</title><link href="https://patrickcap.github.io/blog/2024/rockets-vs-lightning/" rel="alternate" type="text/html" title="Rockets vs Lightning"/><published>2024-03-04T00:00:00+00:00</published><updated>2024-03-04T00:00:00+00:00</updated><id>https://patrickcap.github.io/blog/2024/rockets-vs-lightning</id><content type="html" xml:base="https://patrickcap.github.io/blog/2024/rockets-vs-lightning/"><![CDATA[<p>After United Launch Alliance’s successful launch of their Vulcan Centaur rocket on the 8th of January, curious eyes may wonder why the rocket is surrounded by four large towers. In fact, if you are a regular observer of rocket launches, you may notice similar towers surrounding rockets at launch pads around the world.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/tutorials/rockets_vs_lightning/Vulcan_Centaur-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/tutorials/rockets_vs_lightning/Vulcan_Centaur-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/tutorials/rockets_vs_lightning/Vulcan_Centaur-1400.webp"/> <img src="/assets/img/tutorials/rockets_vs_lightning/Vulcan_Centaur.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Lift-off of the Vulcan Centaur on January 8, 2024, by United Launch Alliance (ULA). Photo credit: NASASpaceflight<d-footnote>https://www.youtube.com/watch?v=rtPoAUuYXHo&amp;t=5449s&amp;ab_channel=NASASpaceflight</d-footnote>. </div> <p>Read the full article on IET’s EngX site <a href="https://engx.theiet.org/b/blogs/posts/rockets-vs-lightning">here</a>.</p>]]></content><author><name>Patrick Capaldo</name></author><category term="tutorials"/><category term="aerospace"/><summary type="html"><![CDATA[What is the purpose of the towers surrounding a launch pad.]]></summary></entry><entry><title type="html">Reviewing ‘Helgoland: The Strange and Beautiful Story of Quantum Physics’</title><link href="https://patrickcap.github.io/blog/2024/book-helgoland/" rel="alternate" type="text/html" title="Reviewing ‘Helgoland: The Strange and Beautiful Story of Quantum Physics’"/><published>2024-01-03T00:00:00+00:00</published><updated>2024-01-03T00:00:00+00:00</updated><id>https://patrickcap.github.io/blog/2024/book-helgoland</id><content type="html" xml:base="https://patrickcap.github.io/blog/2024/book-helgoland/"><![CDATA[<p><b>7/10</b></p> <p>‘Helgoland’ expertly brings you into the microcosm of some of the smartest minds the world has ever seen, and guides you through why quantum mechanics is so notoriously nonintuitive. This approach is a refreshing change to most other literature around this topic which tries, and often fails, to explain quantum mechanics itself. Technical notes are quick and concise, never delving too deep such that you lose understanding, nor too brief that you can’t fully appreciate the significance of these discoveries. The main takeaway of the book being that reality is based on the relationships between different things, not necessarily the search for more and more fundamental building blocks. If you enjoy philosophy, the book also delves deeply into this towards the end.</p>]]></content><author><name></name></author><category term="books"/><category term="quantum-mechanics"/><summary type="html"><![CDATA[Difficult to not read in a single sitting.]]></summary></entry><entry><title type="html">Hubble Constant</title><link href="https://patrickcap.github.io/blog/2022/tutorial-hubble-constant/" rel="alternate" type="text/html" title="Hubble Constant"/><published>2022-07-22T00:00:00+00:00</published><updated>2022-07-22T00:00:00+00:00</updated><id>https://patrickcap.github.io/blog/2022/tutorial-hubble-constant</id><content type="html" xml:base="https://patrickcap.github.io/blog/2022/tutorial-hubble-constant/"><![CDATA[<div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/tutorials/hubble_constant/thumb_hubble_const-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/tutorials/hubble_constant/thumb_hubble_const-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/tutorials/hubble_constant/thumb_hubble_const-1400.webp"/> <img src="/assets/img/tutorials/hubble_constant/thumb_hubble_const.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> The expanding universe<d-footnote>https://www.livescience.com/hubble-constant.html</d-footnote>. </div> <p>In the 1920’s Edwin Hubble discovered that the universe is expanding by noticing that the vast majority of galaxies were receding from us (by measuring their distance using <a href="https://patrickcap.github.io/me/blog/2022/tutorial-universal-measuring-sticks/">universal measuring sticks</a> and their redshift) and that more distant galaxies were receding faster. The Hubble constant is a measurement of the rate of this expansion.</p> <h2 id="traditional-measurement-methods">Traditional Measurement Methods</h2> <p>The Hubble constant has traditionally been measured in two ways: using supernovae in distant galaxies to measure their distance, or the fluctuations in the Cosmic Microwave Background Radiation (CMBR). Using the supernova method, calculations of the Hubble constant are about 68 km/s/Mpc (units: kilometres per second per mega-parsec) whilst the CMBR method produced a result of about 72 km/s/Mpc c<d-footnote>Warren, S., 2022. The Hubble constant, explained. [online] News.uchicago.edu. Available at: [Accessed 22 July 2022].</d-footnote> - a significant discrepancy. Note that the units of the Hubble constant indicate a rate of expansion for a particular distance from an observer, the further the distance between two points, the greater the rate of expansion between them.</p> <h2 id="a-new-light">A New Light</h2> <p>In 2010, Wendy Freedman and Barry Madore proposed a new method of measuring the Hubble constant that makes use of red giants: bloated and dying stars. During their final death throes, red giants rapidly increase their core temperature to about 100 million degrees and reduce their overall brightness c<d-footnote>Warren, S., 2022. The Hubble constant, explained. [online] News.uchicago.edu. Available at: [Accessed 22 July 2022].</d-footnote>. Red giants at known distances can be used to calibrate this pattern to be applied to red giants at unknown distances - thus helping to measure the recession rate of a greater sample of galaxies in our universe. This method produced a Hubble constant value of about 69.8 km/s/Mpcd is improving confidence in the true value of the expansion rate of our universe at about 70 km/s/Mpc<d-footnote>Freedman, W. and Madore, B., 2010. The Hubble Constant. [online] Ned.ipac.caltech.edu. Available at: [Accessed 22 July 2022].</d-footnote> - almost splitting the middle between the two previous results.</p> <h2 id="a-new-wave">A New Wave</h2> <p>Even more recently, in 2017, the Laser Interferometer Gravitational-Wave Observatory (LIGO) in Livingstone, Louisiana, observed the gravitational wave and electromagnetic aftershock of a collision between two orbiting neutron stars about 120 million years ago/light-years away. Using both of these results, researchers were able to calculate a new value for the Hubble constant at about 70 km/s/Mpc<d-footnote>Warren, S., 2022. The Hubble constant, explained. [online] News.uchicago.edu. Available at: [Accessed 22 July 2022].</d-footnote>. This result strongly agrees with the red giant method found by Freedman and Madore in 2010 and is improving confidence in the true value of the expansion rate of our universe at about 70 km/s/Mpc<d-footnote>Freedman, W. and Madore, B., 2010. The Hubble Constant. [online] Ned.ipac.caltech.edu. Available at: [Accessed 22 July 2022].</d-footnote>.</p>]]></content><author><name>Patrick Capaldo</name></author><category term="tutorials"/><category term="astronomy"/><summary type="html"><![CDATA[Blowing up the universe like a balloon.]]></summary></entry><entry><title type="html">Black Holes, Quasars, and Blazars</title><link href="https://patrickcap.github.io/blog/2022/tutorial-black-holes/" rel="alternate" type="text/html" title="Black Holes, Quasars, and Blazars"/><published>2022-07-21T00:00:00+00:00</published><updated>2022-07-21T00:00:00+00:00</updated><id>https://patrickcap.github.io/blog/2022/tutorial-black-holes</id><content type="html" xml:base="https://patrickcap.github.io/blog/2022/tutorial-black-holes/"><![CDATA[<div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/tutorials/black_holes_quasars_blazars/thumb_blazar-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/tutorials/black_holes_quasars_blazars/thumb_blazar-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/tutorials/black_holes_quasars_blazars/thumb_blazar-1400.webp"/> <img src="/assets/img/tutorials/black_holes_quasars_blazars/thumb_blazar.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Blazar<d-footnote>https://www.wired.com/story/whats-a-blazar-a-galactic-bakery-for-cosmic-rays/</d-footnote>. </div> <p>Black holes are some of the simplest objects in the universe with only three properties: mass, spin, and charge. Mass generally divides the very small (stellar) from the very large (supermassive), spin divides the rotating (likely ubiquitous) from the non-rotating (likely purely hypothetical), and charge divides those that have accreted more protons (positive) from those that have accreted more electrons (negative). Quasars and blazars result from black holes depending on their mass and level of activity.</p> <h2 id="mass">Mass</h2> <p>It is generally believed that there are two main types of black holes when categorised by their mass: stellar and supermassive. Stellar black holes are remnants of large stars (3-10 solar masses) that go supernova and then proceed to collapse into a singularity under their own weight. Whilst stellar black holes are difficult to detect (due to them not emitting light and occassionally forming visible accretion disks), there is an estimated ten million to one billion of them in the Milky Way (compared to the estimation of about 100 billion stars in the Milky Way) <d-footnote>Bolles, D., 2022. Black Holes | Science Mission Directorate. [online] Science.nasa.gov. Available at: [Accessed 20 July 2022]. </d-footnote>.</p> <p>Supermassive blackholes have masses ranging from millions to billions of solar masses and they exist in the centre of the vast majortiy of galaxies <d-footnote>Bolles, D., 2022. Black Holes | Science Mission Directorate. [online] Science.nasa.gov. Available at: [Accessed 20 July 2022]. </d-footnote>. The method of their formation is not yet known perfectly. Some theories suggest that supermassive black holes are seeded from supermassive stars which become extremely large stellar black holes, which then proceeds to grow as it feeds on an abundance of primordial galactical gas. Other theories suggest that they form as a result of many stellar black holes combining or that some black holes exhibit faster rates of growth than others. The Event Horizon Telescope (a network of telescopes spread over the Earth’s surface) has successfully “photographed” two supermassive blackholes: the first being that within the galaxy Messier 81 (M81) which is active and readily observable, the second being that within our own galaxy, the Milky Way, known as Sagittarius A* (pronounded “Sagittarius A star”) (Figures 1 and 2).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/tutorials/black_holes_quasars_blazars/m87_Sastar-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/tutorials/black_holes_quasars_blazars/m87_Sastar-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/tutorials/black_holes_quasars_blazars/m87_Sastar-1400.webp"/> <img src="/assets/img/tutorials/black_holes_quasars_blazars/m87_Sastar.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 1: Images from the Event Horizont Telescope of the black holes within galaxies Messier 81 (left) and the Milky Way (Sagittarius A*) (right)<d-footnote>Boumann, K., Akiyama, K., Gómez, J.L., 2022. Spot the difference: Imaging Sagittarius A* and M87*. Available at: [Accessed 21 July 2022].</d-footnote>. </div> <h3 id="quasars">Quasars</h3> <p>A quasar (short for quasi-stellar radio source) is a term used to describe active galactic nuclei - that is, supermassive black holes at the centre of galaxies that are feeding on matter and therefore emitting a significant amount of radiation. These luminous structures include an accretion disk emitting visible and ultraviolet light, jets of radio light all the way through to X-ray light are aligned with the axis of rotation of the black hole, and the gas and dust surrounding the black hole shine in infrared light (Figure 2)<d-footnote>Young, M., 2021. What Is a Quasar?. [online] Sky &amp; Telescope. Available at: [Accessed 20 July 2022].</d-footnote>. The jet of a quasar also contains matter such as protons, electrons, and neutrinos (uncharged and very low mass particles) which are accelerated to near luminal velocities from magnetic fields concentrated on the poles of the host black hole.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/tutorials/black_holes_quasars_blazars/quasar-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/tutorials/black_holes_quasars_blazars/quasar-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/tutorials/black_holes_quasars_blazars/quasar-1400.webp"/> <img src="/assets/img/tutorials/black_holes_quasars_blazars/quasar.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 2: The structure of a quasar<d-footnote>Antonucci, R., 2022. The glowing dusty heart of a hidden quasar. Nature 602, 390-391 (2022). doi: https://doi.org/10.1038/d41586-022-00380-4</d-footnote>. </div> <h3 id="blazars">Blazars</h3> <p>A blazar is simply a quasar that happens to have its jets pointed towards Earth (Figure 3). Whilst quasars can still be slightly difficult to observe, blazars are much easier to identify as they are some of the most luminous objects in the universe due to their special orientation. As aforementioned, the jets of active galactic nuclei also contain matter such as electrons, protons, and neutrinos moving at near luminal velocities. When considering a blazar, these particles are incident on the Earth, and some experiments such as the IceCube Neutrino Observatory in Antarctica are designed to detect the incident neutrinos from blazars.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/tutorials/black_holes_quasars_blazars/quasar_vs_blazar-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/tutorials/black_holes_quasars_blazars/quasar_vs_blazar-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/tutorials/black_holes_quasars_blazars/quasar_vs_blazar-1400.webp"/> <img src="/assets/img/tutorials/black_holes_quasars_blazars/quasar_vs_blazar.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 3: Comparison of active galactic nuclei that point their jets away from Earth (quasar) (left) or towards the Earth (blazar) (right)<d-footnote>Carlson, E., 2018. Blazars explained. [online] Astronomy.com. Available at: [Accessed 20 July 2022].</d-footnote>. </div> <h2 id="spin">Spin</h2> <p>Black holes form by the collapse of matter to a singularity, and since almost all gravitationally bound objects exhibit some angular momentum, it is highly likely that a black hole will also exhibit angular momentum. Furthermore, since black holes form from objects that were once much bigger (e.g., large stars), their rate of rotation also increases as the radius of the object decreases before the black hole is formed (in the same way that an ice skaters rate of rotation increases as they pull their arms towards their body - conservation of angular momentum). Due to this, black holes can spin at rates approaching the speed of light. For example, the black hole Cygnus X-1 (in constellation Cygnus) was measured to have a rate of rotation of about 800 times per second, and with a radius of only 44km<d-footnote>Today's Science. 2022. Cygnus X-1 mass and spin determined. [online] Available at: [Accessed 21 July 2022].</d-footnote> would have points on its event horizon moving at about 74% the speed of light.</p> <p>In such conditions, the effects of frame dragging - when a massive body (which naturally distorts the fabric of spacetime as General Relativity states) moves through or rotates within spacetime, causing the fabric to be dragged with the object. In 2012 and 2022, the Italian Space Agency launched the Laser Relativity Satellite (LARES) 1 and 2, respectively, with the intention of measuring frame dragging caused by Earth.</p> <h2 id="charge">Charge</h2> <p>As mentioned at the start of this page, black holes can become charged by accreting more positively charged matter than negatively charged matter, or vice versa. However, charged black holes are unlikely to occur in nature as once the black hole becomes slightly positively or negatively charged, it will more strongly attract matter of the opposite charge, accrete it, and become more neutral. Thus, neutrally charged black holes are expected to be much more common than charged black holes.</p> <h2 id="spin-vs-charge">Spin vs. Charge</h2> <p>A summary of the types of black holes according to their spin and charge properties is hown in the table below.</p> <table> <thead> <tr> <th> </th> <th>Not Charged</th> <th>Charged</th> </tr> </thead> <tbody> <tr> <td>Not Rotating</td> <td>Swarzchild</td> <td>Reissner–Nordström</td> </tr> <tr> <td>Rotating</td> <td>Kerr</td> <td>Kerr–Newman</td> </tr> </tbody> </table>]]></content><author><name>Patrick Capaldo</name></author><category term="tutorials"/><category term="cosmology"/><summary type="html"><![CDATA[Some of the simplest and most powerful objects in the cosmos.]]></summary></entry></feed>